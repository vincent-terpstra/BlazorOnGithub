@using BlazorOnGithub.Services
@using System.Text.Json
@inject IJSRuntime JsRuntime;
@implements IDisposable;

@if (_hasLoaded)
{
    <CascadingValue Value="@this" IsFixed>
        @ChildContent
    </CascadingValue>
}

@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }

        private const string Key = "ApplicationState";

    public AppState AppState = default!;
    private bool _hasLoaded = false;


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var value = await JsRuntime.InvokeAsync<string>("localStorage.getItem", Key);
            if (!string.IsNullOrWhiteSpace(value))
            {
                AppState = JsonSerializer.Deserialize<AppState>(value) ?? new();
            }
        }
        finally
        {
            AppState ??= new();
        }
        AppState.AppStateChanged += SaveAppState;
        _hasLoaded = true;
        
    }


    public void Dispose()
    {
        AppState.AppStateChanged -= SaveAppState;
        SaveAppState();
    }

    private async void SaveAppState()
    {
        try
        {
            var value = JsonSerializer.Serialize(AppState);
            await JsRuntime.InvokeVoidAsync("localStorage.setItem", Key, value);
        }
        catch
        {
            // Ignored
        }
    }

}